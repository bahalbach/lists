{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultId","nanoid","defaultList","id","text","defaultChildren","ListItem","props","nodes","find","node","nodeId","children","filter","relation","parentId","useState","editMode","setEditMode","content","setContent","className","type","value","autoFocus","onBlur","onChange","e","currentTarget","onDoubleClick","map","key","childId","handleClick","AddListItemButton","onClick","App","setNodes","setChildren","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAOMA,G,MAAYC,eAEZC,EAAsB,CAAC,CAAEC,GAAIH,EAAWI,KAD1B,yBAEdC,EAAmC,GA8BzC,SAASC,EAASC,GAAuF,IAAD,EAKhGH,EAAI,UAAGG,EAAMC,MAAMC,MAAK,SAAAC,GAAI,OAAIA,EAAKP,KAAOI,EAAMI,iBAA9C,aAAG,EAAoDP,KAC3DQ,EAAWL,EAAMK,SAASC,QAAO,SAAAC,GAAQ,OAAIA,EAASC,WAAWR,EAAMI,UANyB,EAQtEK,oBAAS,GAR6D,mBAQ/FC,EAR+F,KAQrFC,EARqF,OASxEF,mBAASZ,GAT+D,mBAS/Fe,EAT+F,KAStFC,EATsF,KAWtG,OACE,6BAASC,UAAU,YACjB,iCACGJ,EACC,2BACEK,KAAK,OACLC,MAAOJ,EACPK,WAAW,EACXC,OAAQ,kBAAMP,GAAY,IAC1BQ,SAAU,SAAUC,GAAKP,EAAWO,EAAEC,cAAcL,UAEtD,0BAAMM,cAAe,WAAQX,GAAY,KAAzC,IAAoDC,EAApD,OAGJ,yBAAKE,UAAU,gBACZT,EAASkB,KAAI,SAAAhB,GAAQ,OACpB,kBAACR,EAAD,CAAUyB,IAAKjB,EAASkB,QAASrB,OAAQG,EAASkB,QAASxB,MAAOD,EAAMC,MAAOI,SAAUL,EAAMK,SAAUqB,YAAa1B,EAAM0B,iBAE9H,kBAACC,EAAD,CAAmBC,QAAU5B,EAAM0B,YAAY1B,EAAMI,YAM7D,SAASuB,EAAkB3B,GACzB,OACE,6BACE,4BAAQ4B,QAAS5B,EAAM4B,SAAvB,kBA0BSC,MAnBf,WAAgB,IAAD,EACapB,mBAASd,GADtB,mBACNM,EADM,KACC6B,EADD,OAEmBrB,mBAASX,GAF5B,mBAENO,EAFM,KAEI0B,EAFJ,KAUb,OACE,yBAAKjB,UAAU,OAAf,QAEE,6BACA,kBAACf,EAAD,CAAUK,OAAQX,EAAWQ,MAAOA,EAAOI,SAAUA,EAAUqB,YAV/C,SAAClB,GAAD,OAAsB,WACxC,IAAMiB,EAAU/B,cAChBoC,EAAS,GAAD,mBAAK7B,GAAL,CAAY,CAAEL,GAAI6B,EAAS5B,KAnFnB,2BAoFhBkC,EAAY,GAAD,mBAAK1B,GAAL,CAAe,CAACG,WAAUiB,oBChFrBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b1046041.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { nanoid } from 'nanoid'\nimport './App.css';\n\ninterface Node {id: string; text: string }\ninterface ChildRelation {parentId: string; childId: string}\n\nconst defaultId = nanoid();\nconst defaultText = \"Double Click to Edit\";\nconst defaultList: Node[] = [{ id: defaultId, text: defaultText }];\nconst defaultChildren: ChildRelation[] = [];\n\n/*\n  table 1: nodes\n  id, text\n\n  table 2: children\n  id, child id\n*/\n\n// function findParent(id: string) {\n//   const stack = [defaultList];\n//   var node;\n//   while (stack.length) {\n//     node = stack.shift();\n//     if (node?.id === id) {\n//       return node;\n//     }\n//     node?.children && stack.push(...node?.children)\n//   }\n//   return null;\n// }\n\n// function addChild(parentID: string) {\n//   const parent = findParent(parentID);\n//   if(parent) \n//     parent.children = [{ id: nanoid(), text: defaultText, children: [] }, ...parent.children];\n//   console.log(\"added child\")\n// }\n\nfunction ListItem(props: { nodeId: string; nodes: Node[], children: ChildRelation[], handleClick: any}) {\n  /*\n    Displays text for this item, after the text there is a button to go into edit mode\n    When clicked in normal mode expand child elements\n  */\n  const text = props.nodes.find(node => node.id === props.nodeId)?.text;\n  const children = props.children.filter(relation => relation.parentId===props.nodeId);\n\n  const [editMode, setEditMode] = useState(false);\n  const [content, setContent] = useState(text);\n\n  return (\n    <details className=\"ListItem\">\n      <summary>\n        {editMode ?\n          <input\n            type=\"text\"\n            value={content}\n            autoFocus={true}\n            onBlur={() => setEditMode(false)}\n            onChange={function (e) { setContent(e.currentTarget.value) }}\n          /> :\n          <span onDoubleClick={() => { setEditMode(true) }}> {content}  </span>\n        }\n      </summary>\n      <div className=\"ListChildren\">\n        {children.map(relation => \n          <ListItem key={relation.childId} nodeId={relation.childId} nodes={props.nodes} children={props.children} handleClick={props.handleClick}/>\n        )}\n        <AddListItemButton onClick={ props.handleClick(props.nodeId) } />\n      </div>\n    </details>\n  );\n}\n\nfunction AddListItemButton(props: { onClick: any }) {\n  return (\n    <div>\n      <button onClick={props.onClick}>\n        New List Item\n    </button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [nodes, setNodes] = useState(defaultList);\n  const [children, setChildren] = useState(defaultChildren);\n\n  const handleClick = (parentId: string) => () => {\n    const childId = nanoid();\n    setNodes([...nodes, { id: childId, text: defaultText }]);\n    setChildren([...children, {parentId, childId}]);\n  }\n\n  return (\n    <div className=\"App\">\n      Lists\n      <br />\n      <ListItem nodeId={defaultId} nodes={nodes} children={children} handleClick={handleClick}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}