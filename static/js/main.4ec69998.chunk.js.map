{"version":3,"sources":["listSlice.tsx","List.tsx","App.tsx","serviceWorker.ts","store.tsx","index.tsx"],"names":["defaultId","nanoid","listAdapter","createEntityAdapter","initialState","getInitialState","topList","displayedList","addOne","id","title","description","children","listSlice","createSlice","name","reducers","changeListTitle","state","action","payload","existingList","entities","changeListDescription","addList","reducer","childId","parentId","push","prepare","addParentToList","oldParent","Object","values","find","list","includes","index","findIndex","dropList","oldParentId","descendsFrom","parentList","oldParentList","childsOldIndex","splice","removeList","listId","changeDisplayedList","actions","selectTopList","undo","redo","present","getSelectors","selectListById","selectAll","selectById","selectCanUndo","selectIds","past","length","selectCanRedo","future","undoableReducer","undoable","ListTitle","props","useState","setTitle","editMode","setEditMode","dispatch","useDispatch","className","type","value","autoFocus","onBlur","onChange","e","currentTarget","onFocus","select","onKeyDown","key","blur","onClick","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","ListDescription","setDescription","List","useSelector","open","onDragOver","preventDefault","onDrop","stopPropagation","parse","getData","map","MainListView","match","displayedListId","params","canUndo","canRedo","Fragment","disabled","ActionCreators","App","path","exact","component","to","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","stored","localStorage","getItem","preloadedState","store","configureStore","listReducer","subscribe","getState","stateString","setItem","saveState","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ec69998.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice, EntityState, nanoid } from \"@reduxjs/toolkit\";\r\nimport undoable from \"redux-undo\";\r\n\r\nconst defaultTitle = \"List Name\";\r\nconst defaultDescription = \"\";\r\nconst defaultId = nanoid();\r\n\r\nconst listAdapter = createEntityAdapter<ListNode>();\r\n\r\nlet initialState = listAdapter.getInitialState({\r\n    topList: defaultId,\r\n    displayedList: defaultId,\r\n});\r\ninitialState = listAdapter.addOne(initialState, { id: defaultId, title: defaultTitle, description: defaultDescription, children: [] });\r\n\r\nfunction descendsFrom(state: EntityState<ListNode>, { parentId, childId }: { parentId: string, childId: string }) {\r\n    let parentList = state.entities[parentId];\r\n    if (!parentList?.children) return false\r\n    if (parentList?.children.includes(childId)) return true;\r\n    for (let child of parentList.children) {\r\n        if (descendsFrom(state, { parentId: child, childId })) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const listSlice = createSlice({\r\n    name: 'list',\r\n    initialState,\r\n    reducers: {\r\n        changeListTitle: (state, action: { payload: { id: string, title: string } }) => {\r\n            const { id, title } = action.payload;\r\n            const existingList = state.entities[id];\r\n            if (existingList) existingList.title = title;\r\n        },\r\n        changeListDescription: (state, action: { payload: { id: string, description: string } }) => {\r\n            const { id, description } = action.payload;\r\n            const existingList = state.entities[id];\r\n            if (existingList) existingList.description = description;\r\n        },\r\n        addList: {\r\n            reducer(state, action) {\r\n                // add the new node to the state\r\n                listAdapter.addOne(state, { id: action.payload.childId, title: action.payload.title, description: action.payload.description, children: [] });\r\n\r\n                // update the new child's parent (node where this was called) with the parent's new child\r\n                state.entities[action.payload.parentId]!.children.push(action.payload.childId);\r\n            },\r\n            // @ts-ignore\r\n            prepare(parentId: string) {\r\n                return {\r\n                    payload: {\r\n                        parentId,\r\n                        childId: nanoid(),\r\n                        title: defaultTitle,\r\n                        description: defaultDescription\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        addParentToList: {\r\n            reducer(state, action) {\r\n                // add new parent node\r\n                listAdapter.addOne(state, { id: action.payload.parentId, title: action.payload.title, description: action.payload.description, children: [action.payload.childId] });\r\n                // if node had a parent, point that parent (now grandparent) to the nodes new parent\r\n                // find parent\r\n                const oldParent = Object.values(state.entities).find(list => list?.children.includes(action.payload.childId));\r\n                // if parent exists, change it's children array to include the new parent instead of the old child\r\n                if (oldParent) {\r\n                    // find old child's location in old parents children array\r\n                    const index = state.entities[oldParent.id]!.children.findIndex(childId => childId === action.payload.childId);\r\n                    // set old parents children array to have new parent in old child's location\r\n                    state.entities[oldParent.id]!.children[index] = action.payload.parentId;\r\n                }\r\n\r\n                // change the displayed node to the new parent\r\n                state.displayedList = action.payload.parentId;\r\n                // if child is old top node, make parent new top node\r\n                if (state.topList === action.payload.childId) state.topList = action.payload.parentId;\r\n            },\r\n            // @ts-ignore\r\n            // prepare(grandparentId: string | null, childId: string) {\r\n            prepare(childId: string) {\r\n                return {\r\n                    payload: {\r\n                        parentId: nanoid(),\r\n                        childId,\r\n                        title: defaultTitle,\r\n                        description: defaultDescription\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        dropList: (state, action: { payload: { parentId: string, childId: string, oldParentId: string } }) => {\r\n            // childId is the id of the dragged list, parentId is the id of the last where the dragged item is dropped, \r\n            // oldParentId is the Id of the list that contained the dragged item.\r\n            const { parentId, childId, oldParentId } = action.payload;\r\n\r\n            // stop impossible/meaningless drags\r\n            if (!oldParentId || parentId === childId || parentId === oldParentId) return;\r\n\r\n            // check if you are dragging a list to it's own descendent\r\n            if (descendsFrom(state, { parentId: childId, childId: parentId })) return;\r\n\r\n            const parentList = state.entities[parentId]!;\r\n            //const childList = state.entities[childId]!;\r\n            const oldParentList = state.entities[oldParentId]!;\r\n\r\n            // find where the dragged item was and remove it from it's old containing list\r\n            const childsOldIndex = oldParentList.children.findIndex(id => id === childId);\r\n            oldParentList.children.splice(childsOldIndex, 1);\r\n\r\n            // add the dragged item as a child of it's new parent\r\n            parentList.children.push(childId);\r\n\r\n            // if ( childId === state.topList) {\r\n            //     const parentsChildren = parentList.children;\r\n            //     const childsChildren = childList.children;\r\n            //     state.topList = parentId;\r\n            //     parentList.children.push(childId);\r\n            //     childList.children.findIndex(id => id === parentI)\r\n            // }\r\n\r\n\r\n        },\r\n        removeList: (state, action: { payload: { listId: string, parentId: string } }) => {\r\n            const { listId, parentId } = action.payload;\r\n            const parentList = state.entities[parentId]!;\r\n            const index = parentList.children.findIndex(id => id === listId);\r\n\r\n            // just remove the list id from it's parents children, don't remove it because it can have multiple parents\r\n            parentList.children.splice(index, 1);\r\n\r\n            // \r\n            // let currentChildren = [action.payload.listId];\r\n            // // remove all nodes in list, then find children of those nodes and repeat\r\n            // while (currentChildren.length) {\r\n            //     let idsToRemove = currentChildren;\r\n            //     currentChildren = currentChildren.flatMap(listId => state.entities[listId]!.children);\r\n            //     listAdapter.removeMany(state, idsToRemove);\r\n            // }\r\n\r\n        },\r\n        changeDisplayedList: (state, action) => {\r\n            state.displayedList = action.payload;\r\n        }\r\n    },\r\n})\r\n\r\nexport const { changeListTitle, changeListDescription, addList, addParentToList, dropList, removeList, changeDisplayedList, undo, redo } = listSlice.actions\r\n\r\nexport const selectDisplayedList = (state: SystemState) => {\r\n    return state.list.present.displayedList;\r\n}\r\nexport const selectTopList = (state: SystemState) => {\r\n    return state.list.present.topList;\r\n}\r\n\r\n// export const selectIsValidNode = (state: SystemState) => {\r\n//     return state.list.present.nodes.find;\r\n// }\r\nexport const {\r\n    selectAll: selectAllLists,\r\n    selectById: selectListById,\r\n    selectIds: selectListIds,\r\n} = listAdapter.getSelectors((state: SystemState) => state.list.present)\r\n\r\n// export const selectNode = (nodeId: string) => (state: SystemState) => {\r\n//     // const nodeIndex = state.list.history[state.list.historyIndex].node;\r\n//     // const childRelationsIndex = state.list.history[state.list.historyIndex].childRelation;\r\n//     // const nodes = state.list.nodeHistory[nodeIndex];\r\n//     // const childRelations = state.list.childRelationHistory[childRelationsIndex];\r\n\r\n//     // find the node\r\n//     const node = state.list.present.nodes.find(node => node.id === nodeId);\r\n//     const childrenIds = state.list.present.childRelations.filter(relation => relation.parentId === nodeId).map(relation => relation.childId);\r\n\r\n//     // console.log(\"Node History: \", state.list.nodeHistory);\r\n//     return ([node, childrenIds]) as [ListNode, string[]];\r\n// }\r\n\r\n// export const selectNodes = (state: SystemState) => state.list.present.nodes;\r\n\r\nexport const selectCanUndo = (state: any) => state.list.past.length > 0;\r\nexport const selectCanRedo = (state: any) => state.list.future.length > 0;\r\n\r\nconst undoableReducer = undoable(listSlice.reducer);\r\nexport default undoableReducer","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addList, changeListDescription, changeListTitle, dropList, removeList, selectListById } from \"./listSlice\";\r\n\r\nfunction ListTitle(props: { id: string, title: string, parentId: string }) {\r\n    const [title, setTitle] = useState(props.title);\r\n    const [editMode, setEditMode] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    function onDragStart(event: React.DragEvent<HTMLElement>) {\r\n        event.dataTransfer.setData(\"text/plain\", JSON.stringify({ id: props.id, parentId: props.parentId }));\r\n    }\r\n\r\n    return (\r\n        <summary className=\"ListTitle\" >\r\n            {editMode ?\r\n                <input\r\n                    type=\"text\"\r\n                    value={title}\r\n                    autoFocus={true}\r\n                    onBlur={() => {\r\n                        setEditMode(false)\r\n                        dispatch(changeListTitle({ id: props.id, title }));\r\n                    }}\r\n                    onChange={function (e) { setTitle(e.currentTarget.value) }}\r\n                    onFocus={function (e) { e.currentTarget.select() }}\r\n                    onKeyDown={function (e) { if (e.key === \"Enter\") e.currentTarget.blur() }}\r\n                /> :\r\n                <span>\r\n                    {props.title}\r\n                    <button className=\"EditButton EditTitleButton\" onClick={() => {\r\n                        setTitle(props.title);\r\n                        setEditMode(true);\r\n                    }}>Edit</button>\r\n                    <button className=\"EditButton DragButton\"\r\n                        draggable=\"true\"\r\n                        onDragStart={onDragStart}\r\n                    >Drag Here</button>\r\n                </span>\r\n            }\r\n        </summary>\r\n    );\r\n}\r\n\r\nfunction ListDescription(props: { id: string, description: string }) {\r\n    const [description, setDescription] = useState(props.description);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"ListDescription\">\r\n            {editMode ?\r\n                <textarea\r\n                    value={description}\r\n                    autoFocus={true}\r\n                    onBlur={() => {\r\n                        setEditMode(false);\r\n                        dispatch(changeListDescription({ id: props.id, description }));\r\n                    }}\r\n                    onChange={function (e) { setDescription(e.currentTarget.value) }}\r\n                    onFocus={function (e) { e.currentTarget.select() }}\r\n                    onKeyDown={function (e) { if (e.key === \"Enter\") e.currentTarget.blur() }}\r\n                /> :\r\n                <div>\r\n                    {props.description}\r\n                    <br />\r\n                    <button className=\"EditButton EditDescriptionButton\" onClick={() => {\r\n                        setDescription(props.description);\r\n                        setEditMode(true);\r\n                    }}>Edit</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction List({ listId, parentId }: { listId: string, parentId: string }) {\r\n    const dispatch = useDispatch();\r\n    const list = useSelector((state: SystemState) => selectListById(state, listId));\r\n\r\n    if (!list) return (<div>missing list</div>);\r\n    return (\r\n        <details className=\"ListItem\" open\r\n            onDragOver={e => e.preventDefault()}\r\n            onDrop={e => {\r\n                e.stopPropagation();\r\n                const { id: childId, parentId: oldParentId } = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\r\n                dispatch(dropList({ parentId: listId, childId, oldParentId }));\r\n                return false;\r\n            }}>\r\n            <ListTitle id={list.id} parentId={parentId} title={list.title} />\r\n\r\n            <button className=\"EditButton RemoveTitleButton\" onClick={() => {\r\n                dispatch(removeList({ listId, parentId }));\r\n            }}>Remove</button>\r\n\r\n            <div className=\"ListChildren\">\r\n\r\n                <ListDescription id={list.id} description={list.description} />\r\n\r\n                {list.children.map(childId =>\r\n                    <List key={childId} listId={childId} parentId={list.id} />\r\n                )}\r\n\r\n                <div>\r\n                    <button onClick={() => dispatch(addList(list.id))} className=\"EditButton AddChildButton\">\r\n                        +\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </details >\r\n    );\r\n}\r\n\r\nexport { ListTitle, ListDescription, List }","import React, { useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { List, ListDescription, ListTitle } from './List';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addList, addParentToList, selectCanUndo, selectCanRedo, selectDisplayedList, selectAllLists, selectListById, changeDisplayedList, selectTopList, dropList } from './listSlice';\r\nimport { ActionCreators } from 'redux-undo';\r\n\r\nfunction Navbar() {\r\n  const lists = useSelector(selectAllLists);\r\n  const options = lists.map(list =>\r\n    <li><Link to={`/${list.id}`} key={list.id} >{list.title}</Link></li>)\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>Lists</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              {options}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction SelectList(props: { id: string }) {\r\n  const lists = useSelector(selectAllLists);\r\n  const dispatch = useDispatch();\r\n\r\n  const options = lists.map(list =>\r\n    <option key={list.id} value={list.id}>{list.title}</option>);\r\n  return (\r\n    <select value={props.id} onChange={(e) => dispatch(changeDisplayedList(e.currentTarget.value))}>\r\n      {options}\r\n    </select>\r\n  );\r\n}\r\n\r\nconst MainListView = ({ match }: any) => {\r\n  // console.log(\"props.id: \", match);\r\n  let displayedListId = useSelector(selectTopList);\r\n  if (match) displayedListId = match.params.id;\r\n\r\n  const list = useSelector((state: SystemState) => selectListById(state, displayedListId));\r\n\r\n  const dispatch = useDispatch();\r\n  const canUndo = useSelector(selectCanUndo);\r\n  const canRedo = useSelector(selectCanRedo);\r\n\r\n  const [editMode, setEditMode] = useState(\"EditMode\");\r\n\r\n  if (!list) return <p>\"Not a valid list\"</p>;\r\n\r\n  const { id, title, description } = list;\r\n  return (\r\n    <React.Fragment>\r\n      {/* <SelectList id={id} /> */}\r\n      <select value={editMode} onChange={(e) => setEditMode(e.currentTarget.value)}>\r\n        <option value=\"EditMode\">Edit</option>\r\n        <option value=\"ViewMode\">View</option>\r\n      </select>\r\n      <div className={editMode}\r\n        onDragOver={e => e.preventDefault()}\r\n        onDrop={e => {\r\n          e.stopPropagation();\r\n          const { id: childId, parentId: oldParentId } = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\r\n          dispatch(dropList({ parentId: id, childId, oldParentId }));\r\n          return false;\r\n        }}>\r\n        <ListTitle id={id} title={title} parentId=\"\" />\r\n        <ListDescription id={id} description={description} />\r\n\r\n        {list.children.map(childId =>\r\n          <List key={childId} listId={childId} parentId={id} />\r\n        )}\r\n\r\n        <div>\r\n          <button onClick={() => dispatch(addList(id))} className=\"EditButton AddChildButton\">\r\n            +\r\n        </button>\r\n        </div>\r\n\r\n        <button\r\n          className=\"EditButton ControlButton UndoButton\"\r\n          disabled={!canUndo}\r\n          onClick={() => {\r\n            dispatch(ActionCreators.undo());\r\n          }}> Undo\r\n        </button>\r\n        <button\r\n          className=\"EditButton ControlButton RedoButton\"\r\n          disabled={!canRedo}\r\n          onClick={() => {\r\n            dispatch(ActionCreators.redo());\r\n          }}> Redo\r\n        </button>\r\n\r\n        {/* <div>\r\n          <button onClick={() => dispatch(addParentToList(id))} className=\"EditButton AddChildButton\">\r\n            Add Parent List\r\n          </button>\r\n        </div> */}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const defaultId = useSelector(selectTopList);\r\n  return (\r\n    <Router>\r\n      {/* <Navbar /> */}\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/lists\">\r\n            <MainListView />\r\n          </Route>\r\n          <Route exact path=\"lists/:id\" component={MainListView} />\r\n          <Redirect to=\"/lists\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport listReducer from \"./listSlice\";\r\n\r\nconst stored = localStorage.getItem(\"reduxState\");\r\nconst preloadedState = stored ? { list: JSON.parse(stored) } : {};\r\nconsole.log(\"Loaded: \", stored);\r\n\r\nfunction saveState() {\r\n    let state = store.getState();\r\n    const stateString = JSON.stringify(state.list.present);\r\n    localStorage.setItem(\"reduxState\", stateString);\r\n    console.log(\"Saved state\", stateString)\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        list: listReducer\r\n    },\r\n    preloadedState\r\n});\r\n\r\nstore.subscribe(() => saveState());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}