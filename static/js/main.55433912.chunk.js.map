{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["EditModes","defaultId","nanoid","defaultList","defaultChildren","ListItem","props","useState","None","editMode","setEditMode","text","title","setTitle","desc","description","setDescription","console","log","className","Title","type","value","autoFocus","onBlur","global","saveChangedTitle","nodeId","onChange","e","currentTarget","onFocus","select","onClick","removeThis","Description","children","map","relation","node","nodes","find","id","childId","filter","parentId","key","addChild","SelectList","App","historyIndex","setHistoryIndex","nodeHistory","setNodeHistory","childrenHistory","setChildrenHistory","newNodes","slice","nodeIndex","findIndex","concat","saveChangedDescription","currentChildren","newChildren","idsRemoved","idsToRemove","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAMKA,E,6EAAAA,O,eAAAA,I,iBAAAA,I,8BAAAA,M,KAML,IAAMC,EAAYC,cAGZC,EAAsB,GACtBC,EAAmC,GAEzC,SAASC,EAASC,GAA4N,MAM5MC,mBAASP,EAAUQ,MANyL,mBAMrOC,EANqO,KAM3NC,EAN2N,OAOlNH,mBAASD,EAAMK,MAPmM,mBAOrOC,EAPqO,KAO9NC,EAP8N,OAQtMN,mBAASD,EAAMQ,MARuL,mBAQrOC,EARqO,KAQxNC,EARwN,KAW5O,OADAC,QAAQC,IAAI,WAAYZ,EAAMK,MAE5B,6BAASQ,UAAU,YAEjB,6BAASA,UAAU,aAChBV,IAAaT,EAAUoB,MACtB,2BACEC,KAAK,OACLC,MAAOV,EACPW,WAAW,EACXC,OAAQ,WACNd,EAAYV,EAAUQ,MACtBF,EAAMmB,OAAOC,iBAAiBpB,EAAMqB,OAAQf,IAE9CgB,SAAU,SAAUC,GAAKhB,EAASgB,EAAEC,cAAcR,QAClDS,QAAS,SAAUF,GAAKA,EAAEC,cAAcE,YAE1C,8BACG1B,EAAMK,KACP,4BAAQQ,UAAU,6BAA6Bc,QAAS,WAAQpB,EAASP,EAAMK,MAAOD,EAAYV,EAAUoB,SAA5G,QACA,4BAAQD,UAAU,+BAA+Bc,QAAS3B,EAAMmB,OAAOS,WAAW5B,EAAMqB,SAAxF,YAKN,yBAAKR,UAAU,gBAEb,yBAAKA,UAAU,mBACZV,IAAaT,EAAUmC,YACtB,8BACEb,MAAOP,EACPQ,WAAW,EACXC,OAAQ,kBAAMd,EAAYV,EAAUQ,OACpCoB,SAAU,SAAUC,GAAKb,EAAea,EAAEC,cAAcR,UAE1D,6BACGhB,EAAMQ,KACP,6BACA,4BAAQK,UAAU,mCAAmCc,QAAS,WAAQjB,EAAeV,EAAMQ,MAAOJ,EAAYV,EAAUmC,eAAxH,UAKL7B,EAAM8B,SAASC,KAAI,SAAAC,GAClB,IAAMC,EAAOjC,EAAMmB,OAAOe,MAAMC,MAAK,SAAAF,GAAI,OAAIA,EAAKG,KAAOJ,EAASK,WAC5DhC,EAAO4B,EAAM5B,KACbG,EAAOyB,EAAMzB,KACbsB,EAAW9B,EAAMmB,OAAOW,SAASQ,QAAO,SAAAN,GAAQ,OAAIA,EAASO,WAAavC,EAAMqB,UACtF,OAAO,kBAACtB,EAAD,CAAUyC,IAAKR,EAASK,QAAShB,OAAQW,EAASK,QAAShC,KAAMA,EAAMG,KAAMA,EAAMsB,SAAUA,EAAUX,OAAQnB,EAAMmB,YAG9H,6BACE,4BAAQQ,QAAS3B,EAAMmB,OAAOsB,SAASzC,EAAMqB,QAASR,UAAU,kBAAhE,QAUV,SAAS6B,IACP,OACE,iCA0IWC,MApIf,WAAgB,IAAD,EAC2B1C,mBAAS,GADpC,mBACN2C,EADM,KACQC,EADR,OAEyB5C,mBAAS,CAACJ,IAFnC,mBAENiD,EAFM,KAEOC,EAFP,OAGiC9C,mBAAS,CAACH,IAH3C,mBAGNkD,EAHM,KAGWC,EAHX,OAKmBhD,mBAASP,EAAUQ,MALtC,mBAKNC,EALM,KAKIC,EALJ,OAMaH,mBA3FR,SAqFL,mBAMNK,EANM,KAMCC,EAND,OAOyBN,mBA3FpB,IAoFL,mBAONQ,EAPM,KAOOC,EAPP,KASPwB,EAAQY,EAAYF,GACpBd,EAAWkB,EAAgBJ,GACjCjC,QAAQC,IAAI,UAAWsB,GACvBvB,QAAQC,IAAI,aAAckB,GAE1B,IAAMV,EAAmB,SAACC,EAAgBf,GACxC,IAAI4C,EAAWhB,EAAMiB,QACfC,EAAYlB,EAAMmB,WAAU,SAAApB,GAAI,OAAIZ,IAAWY,EAAKG,MACpDH,EAAOC,EAAMkB,GACnBF,EAASE,GAAa,CAAEhB,GAAIH,EAAKG,GAAI/B,KAAMC,EAAOE,KAAMyB,EAAKzB,MAC7DuC,EAAeD,EAAYK,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACJ,KAC9DD,EAAmBD,EAAgBG,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACxB,KACtEe,EAAgBD,EAAe,GAC/BjC,QAAQC,IAAI,cAAeN,IAGvBiD,EAAyB,SAAClC,EAAgBZ,GAC9C,IAAIyC,EAAWhB,EAAMiB,QACfC,EAAYlB,EAAMmB,WAAU,SAAApB,GAAI,OAAIZ,IAAWY,EAAKG,MACpDH,EAAOC,EAAMkB,GACnBF,EAASE,GAAa,CAAEhB,GAAIH,EAAKG,GAAI/B,KAAM4B,EAAK5B,KAAMG,KAAMC,GAC5DsC,EAAeD,EAAYK,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACJ,KAC9DD,EAAmBD,EAAgBG,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACxB,KACtEe,EAAgBD,EAAe,IAG3BH,EAAW,SAACF,GAAD,OAAsB,WACrC,IAAMF,EAAUzC,cAChBmD,EAAeD,EAAYK,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAAC,GAAD,mBAAKpB,GAAL,CAAY,CAAEE,GAAIC,EAAShC,KA1HxE,QA0H2FG,KAzH3F,SA0HhByC,EAAmBD,EAAgBG,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAAC,GAAD,mBAAKxB,GAAL,CAAe,CAAES,WAAUF,gBAChGQ,EAAgBD,EAAe,KAG3BhB,EAAa,SAACP,GAAD,OAAoB,WAOrC,IANA,IAAImC,EAAkB,CAACnC,GACnB6B,EAAWJ,EAAYF,GACvBa,EAAcT,EAAgBJ,GAE9Bc,EAAa,EAL0B,aAQzC,IAAIC,EAAcH,EAClBN,EAAWA,EAASZ,QAAO,SAAAL,GAAI,OAAK0B,EAAYC,SAAS3B,EAAKG,OAC9DqB,EAAcA,EAAYnB,QAAO,SAAAN,GAAQ,OAAK2B,EAAYC,SAAS5B,EAASK,YAC5EmB,EAAkB1B,EAASQ,QAAO,SAAAN,GAAQ,OAAI2B,EAAYC,SAAS5B,EAASO,aAAWR,KAAI,SAAAC,GAAQ,OAAIA,EAASK,WAChHqB,GAAcC,EAAYE,QALrBL,EAAgBK,QAAS,IAOhClD,QAAQC,IAAI,gBAAiB8C,GAE7BX,EAAeD,EAAYK,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACJ,KAC9DD,EAAmBD,EAAgBG,MAAM,EAAGP,EAAe,GAAGU,OAAO,CAACG,KACtEZ,EAAgBD,EAAe,KAGjC,OACE,yBAAK/B,UAAU,OACb,kBAAC6B,EAAD,MACA,6BAAS7B,UAAU,aAChBV,IAAaT,EAAUoB,MACtB,2BACEC,KAAK,OACLC,MAAOV,EACPW,WAAW,EACXC,OAAQ,kBAAMd,EAAYV,EAAUQ,OACpCoB,SAAU,SAAUC,GAAKhB,EAASgB,EAAEC,cAAcR,QAClDS,QAAS,SAAUF,GAAKA,EAAEC,cAAcE,YAE1C,8BACGpB,EACD,4BAAQO,UAAU,6BAA6Bc,QAAS,WAAQvB,EAAYV,EAAUoB,SAAtF,UAKN,yBAAKD,UAAU,mBACZV,IAAaT,EAAUmC,YACtB,8BACEb,MAAOP,EACPQ,WAAW,EACXC,OAAQ,kBAAMd,EAAYV,EAAUQ,OACpCoB,SAAU,SAAUC,GAAKb,EAAea,EAAEC,cAAcR,UAE1D,6BACGP,EACD,6BACA,4BAAQI,UAAU,mCAAmCc,QAAS,WAAQvB,EAAYV,EAAUmC,eAA5F,UAKLC,EAASQ,QAAO,SAAAN,GAAQ,OAAIA,EAASO,WAAa5C,KAAWoC,KAAI,SAAAC,GAChE,IAAMC,EAAOC,EAAMC,MAAK,SAAAF,GAAI,OAAIA,EAAKG,KAAOJ,EAASK,WAC/ChC,EAAO4B,EAAM5B,KACbG,EAAOyB,EAAMzB,KACbiD,EAAc3B,EAASQ,QAAO,SAAAN,GAAQ,OAAIA,EAASO,WAAa5C,KACtE,OAAO,kBAACI,EAAD,CAAUyC,IAAKR,EAASK,QAAShB,OAAQW,EAASK,QAAShC,KAAMA,EAAMG,KAAMA,EAAMsB,SAAU2B,EAAatC,OAAQ,CAAEe,QAAOJ,WAAUW,WAAUb,aAAYR,mBAAkBmC,+BAGtL,6BACE,4BAAQ5B,QAASc,EAAS9C,GAAYkB,UAAU,kBAAhD,MAIF,4BACEA,UAAU,2BACVc,QAAS,WACPhB,QAAQC,IAAI,iBAAkBgC,GAC9BjC,QAAQC,IAAI,uBAAwBkC,EAAYe,QAC5CjB,EAAe,GAAGC,EAAgBD,EAAe,KALzD,SAQA,4BACE/B,UAAU,2BACVc,QAAS,WACPhB,QAAQC,IAAI,iBAAkBgC,GAC9BjC,QAAQC,IAAI,uBAAwBkC,EAAYe,QAC5CjB,EAAeE,EAAYe,OAAS,GAAGhB,EAAgBD,EAAe,KAL9E,WC9MckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,a","file":"static/js/main.55433912.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { nanoid } from 'nanoid'\nimport './App.css';\n\ninterface Node { id: string; text: string; desc: string }\ninterface ChildRelation { parentId: string; childId: string }\nenum EditModes {\n  None,\n  Title,\n  Description\n}\n\nconst defaultId = nanoid();\nconst defaultText = \"Title\";\nconst defaultDesc = \"\"\nconst defaultList: Node[] = [];\nconst defaultChildren: ChildRelation[] = [];\n\nfunction ListItem(props: { nodeId: string; text: string, desc: string, children: ChildRelation[], global: { nodes: Node[], children: ChildRelation[], addChild: any, removeThis: any, saveChangedTitle: any, saveChangedDescription: any } }) {\n  /*\n    Displays text for this item, after the text there is a button to go into edit mode\n    When clicked in normal mode expand child elements\n  */\n\n  const [editMode, setEditMode] = useState(EditModes.None);\n  const [title, setTitle] = useState(props.text);\n  const [description, setDescription] = useState(props.desc);\n\n  console.log(\"Render: \", props.text);\n  return (\n    <details className=\"ListItem\">\n\n      <summary className=\"ListTitle\">\n        {editMode === EditModes.Title ?\n          <input\n            type=\"text\"\n            value={title}\n            autoFocus={true}\n            onBlur={() => {\n              setEditMode(EditModes.None)\n              props.global.saveChangedTitle(props.nodeId, title);\n            }}\n            onChange={function (e) { setTitle(e.currentTarget.value) }}\n            onFocus={function (e) { e.currentTarget.select() }}\n          /> :\n          <span>\n            {props.text}\n            <button className=\"EditButton EditTitleButton\" onClick={() => { setTitle(props.text); setEditMode(EditModes.Title); }}>Edit</button>\n            <button className=\"EditButton RemoveTitleButton\" onClick={props.global.removeThis(props.nodeId)}>Remove</button>\n          </span>\n        }\n      </summary>\n\n      <div className=\"ListChildren\">\n\n        <div className=\"ListDescription\">\n          {editMode === EditModes.Description ?\n            <textarea\n              value={description}\n              autoFocus={true}\n              onBlur={() => setEditMode(EditModes.None)}\n              onChange={function (e) { setDescription(e.currentTarget.value) }}\n            /> :\n            <div>\n              {props.desc}\n              <br />\n              <button className=\"EditButton EditDescriptionButton\" onClick={() => { setDescription(props.desc); setEditMode(EditModes.Description); }}>Edit</button>\n            </div>\n          }\n        </div>\n\n        {props.children.map(relation => {\n          const node = props.global.nodes.find(node => node.id === relation.childId)\n          const text = node!.text;\n          const desc = node!.desc;\n          const children = props.global.children.filter(relation => relation.parentId === props.nodeId);\n          return <ListItem key={relation.childId} nodeId={relation.childId} text={text} desc={desc} children={children} global={props.global} />\n        })}\n\n        <div>\n          <button onClick={props.global.addChild(props.nodeId)} className=\"AddChildButton\">\n            +\n          </button>\n        </div>\n      </div>\n\n    </details>\n  );\n}\n\nfunction SelectList() {\n  return (\n    <select>\n\n    </select>\n  );\n}\n\nfunction App() {\n  const [historyIndex, setHistoryIndex] = useState(0);\n  const [nodeHistory, setNodeHistory] = useState([defaultList]);\n  const [childrenHistory, setChildrenHistory] = useState([defaultChildren]);\n\n  const [editMode, setEditMode] = useState(EditModes.None);\n  const [title, setTitle] = useState(defaultText);\n  const [description, setDescription] = useState(defaultDesc);\n\n  const nodes = nodeHistory[historyIndex];\n  const children = childrenHistory[historyIndex];\n  console.log(\"Nodes: \", nodes);\n  console.log(\"Children: \", children);\n\n  const saveChangedTitle = (nodeId: string, title: string) => {\n    let newNodes = nodes.slice();\n    const nodeIndex = nodes.findIndex(node => nodeId === node.id);\n    const node = nodes[nodeIndex];\n    newNodes[nodeIndex] = { id: node.id, text: title, desc: node.desc };\n    setNodeHistory(nodeHistory.slice(0, historyIndex + 1).concat([newNodes]));\n    setChildrenHistory(childrenHistory.slice(0, historyIndex + 1).concat([children]));\n    setHistoryIndex(historyIndex + 1);\n    console.log(\"New title: \", title);\n  }\n\n  const saveChangedDescription = (nodeId: string, description: string) => {\n    let newNodes = nodes.slice();\n    const nodeIndex = nodes.findIndex(node => nodeId === node.id);\n    const node = nodes[nodeIndex];\n    newNodes[nodeIndex] = { id: node.id, text: node.text, desc: description };\n    setNodeHistory(nodeHistory.slice(0, historyIndex + 1).concat([newNodes]));\n    setChildrenHistory(childrenHistory.slice(0, historyIndex + 1).concat([children]));\n    setHistoryIndex(historyIndex + 1);\n  }\n\n  const addChild = (parentId: string) => () => {\n    const childId = nanoid();\n    setNodeHistory(nodeHistory.slice(0, historyIndex + 1).concat([[...nodes, { id: childId, text: defaultText, desc: defaultDesc }]]));\n    setChildrenHistory(childrenHistory.slice(0, historyIndex + 1).concat([[...children, { parentId, childId }]]));\n    setHistoryIndex(historyIndex + 1);\n  }\n\n  const removeThis = (nodeId: string) => () => {\n    let currentChildren = [nodeId];\n    let newNodes = nodeHistory[historyIndex];\n    let newChildren = childrenHistory[historyIndex];\n\n    let idsRemoved = 0;\n\n    while (currentChildren.length) {\n      let idsToRemove = currentChildren;\n      newNodes = newNodes.filter(node => !idsToRemove.includes(node.id));\n      newChildren = newChildren.filter(relation => !idsToRemove.includes(relation.childId));\n      currentChildren = children.filter(relation => idsToRemove.includes(relation.parentId)).map(relation => relation.childId);\n      idsRemoved += idsToRemove.length;\n    }\n    console.log(\"Removed ids: \", idsRemoved);\n\n    setNodeHistory(nodeHistory.slice(0, historyIndex + 1).concat([newNodes]));\n    setChildrenHistory(childrenHistory.slice(0, historyIndex + 1).concat([newChildren]));\n    setHistoryIndex(historyIndex + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <SelectList />\n      <summary className=\"ListTitle\">\n        {editMode === EditModes.Title ?\n          <input\n            type=\"text\"\n            value={title}\n            autoFocus={true}\n            onBlur={() => setEditMode(EditModes.None)}\n            onChange={function (e) { setTitle(e.currentTarget.value) }}\n            onFocus={function (e) { e.currentTarget.select() }}\n          /> :\n          <span>\n            {title}\n            <button className=\"EditButton EditTitleButton\" onClick={() => { setEditMode(EditModes.Title) }}>Edit</button>\n            {/* <button className=\"EditButton RemoveTitleButton\" onClick={props.removeThis(props.nodeId)}>Remove</button> */}\n          </span>\n        }\n      </summary>\n      <div className=\"ListDescription\">\n        {editMode === EditModes.Description ?\n          <textarea\n            value={description}\n            autoFocus={true}\n            onBlur={() => setEditMode(EditModes.None)}\n            onChange={function (e) { setDescription(e.currentTarget.value) }}\n          /> :\n          <div>\n            {description}\n            <br />\n            <button className=\"EditButton EditDescriptionButton\" onClick={() => { setEditMode(EditModes.Description) }}>Edit</button>\n          </div>\n        }\n      </div>\n\n      {children.filter(relation => relation.parentId === defaultId).map(relation => {\n        const node = nodes.find(node => node.id === relation.childId)\n        const text = node!.text;\n        const desc = node!.desc;\n        const newChildren = children.filter(relation => relation.parentId === defaultId);\n        return <ListItem key={relation.childId} nodeId={relation.childId} text={text} desc={desc} children={newChildren} global={{ nodes, children, addChild, removeThis, saveChangedTitle, saveChangedDescription }} />\n      })}\n\n      <div>\n        <button onClick={addChild(defaultId)} className=\"AddChildButton\">\n          +\n          </button>\n      </div>\n      <button\n        className=\"ControlButton UndoButton\"\n        onClick={() => {\n          console.log(\"historyIndex: \", historyIndex);\n          console.log(\"nodeHistory.length: \", nodeHistory.length);\n          if (historyIndex > 0) setHistoryIndex(historyIndex - 1)\n        }}> Undo\n      </button>\n      <button\n        className=\"ControlButton RedoButton\"\n        onClick={() => {\n          console.log(\"historyIndex: \", historyIndex);\n          console.log(\"nodeHistory.length: \", nodeHistory.length);\n          if (historyIndex < nodeHistory.length - 1) setHistoryIndex(historyIndex + 1)\n        }}> Redo\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}